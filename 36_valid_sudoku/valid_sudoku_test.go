package valid_sudoku

import (
	"testing"
)

type Test struct {
	board [][]byte
	out   bool
}

var board1 = [][]byte{
	{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
}

var board2 = [][]byte{
	{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
}

var board3 = [][]byte{
	{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	{'5', '.', '.', '.', '.', '.', '.', '9', '.'},
	{'.', '.', '.', '5', '6', '.', '.', '.', '.'},
	{'4', '.', '3', '.', '.', '.', '.', '.', '1'},
	{'.', '.', '.', '7', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '5', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
}

var board4 = [][]byte{
	{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
	{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '.', '.', '3', '.', '.', '1'},
	{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
	{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
	{'.', '1', '5', '.', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
	{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
	{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
}

var cases = []Test{
	//{board: board1, out: true},
	//{board: board2, out: false},
	{board: board3, out: false},
	//{board: board4, out: false},
}

func TestIsValidSudoku(t *testing.T) {
	for _, test := range cases {
		res := isValidSudoku(test.board)

		if res != test.out {
			t.Errorf("For %v wanted %v, got %v\n", test.board, test.out, res)
		}
	}
}
